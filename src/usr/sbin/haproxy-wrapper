#!/usr/bin/env bash

set -e

function __cleanup ()
{
	__delete_lock
}

function __create_lock ()
{
	if [[ -n ${lock_file} ]]
	then
		touch "${lock_file}"
	fi
}

function __delete_lock ()
{
	if [[ -f ${lock_file} ]]
	then
		rm -f "${lock_file}"
	fi
}

function __get_options ()
{
	local -r options="${1}"

	local pids

	if [[ -s ${pid_path} ]] \
		&& [[ -S ${stats_socket} ]] \
		&& ps axo command \
			| grep -qE "^${bin} "
	then
		# hitless-reload
		pids="$(< "${pid_path}")"

		printf -- \
			'-W -f %s -p %s -x %s -sf %s%s%s' \
			"${config_path}" \
			"${pid_path}" \
			"${stats_socket}" \
			"${pids}" \
			"${options:+" "}" \
			"${options}"
	else
		# start
		printf -- \
			'-W -f %s -p %s%s%s' \
			"${config_path}" \
			"${pid_path}" \
			"${options:+" "}" \
			"${options}"
	fi
}

function __get_proxy ()
{
	printf -- \
		'%s -n %s' \
		"${nice}" \
		"${niceness}"
}

function __is_valid_configuration ()
{
	${bin} \
		-c \
		-q \
		-f ${config_path}

	if [[ ${?} -ne 0 ]]
	then
		return 1
	fi

	return 0
}

function main ()
{
	local -r bin="/usr/sbin/haproxy"
	local -r bootstrap_state_file="/var/lib/misc/haproxy-bootstrap"
	local -r bootstrap_timeout="4"
	local -r config_path="/etc/haproxy/haproxy.cfg"
	local -r lock_file="/var/lock/subsys/haproxy-wrapper"
	local -r nice="/bin/nice"
	local -r niceness="10"
	local -r stats_socket="/var/lib/haproxy/stats-1"

	local options
	local proxy
	local pid_path="/run/haproxy.pid"
	local verbose="false"

	while [[ "${#}" -gt 0 ]]
	do
		case "${1}" in
			-v|--verbose)
				verbose="true"
				shift 1
				;;
		esac
	done

	if [[ -f ${lock_file} ]]
	then
		>&2 printf -- \
			'ERROR: %s lock detected - aborting\n' \
			"${0##*/}"
		exit 1
	fi

	trap "__cleanup" \
		INT TERM EXIT
	__create_lock

	options="$(
		__get_options
	)"
	proxy="$(
		__get_proxy
	)"

	if [[ ${verbose} == true ]]
	then
		printf -- \
			'INFO: %s waiting on %s\n' \
			"${0##*/}" \
			"${bootstrap_state_file##*/}"
	fi

	set +e
	until [[ -f ${bootstrap_state_file} ]]
	do
		if ! inotifywait -qq \
			-e "create" \
			-t "${bootstrap_timeout}" \
			"${bootstrap_state_file%/*}"
		then
			break
		fi
	done
	set -e

	if ! [[ -f ${bootstrap_state_file} ]]
	then
		>&2 printf -- \
			'ERROR: %s timed out waiting on %s\n' \
			"${0##*/}" \
			"${bootstrap_state_file##*/}"
		exit 1
	fi

	if ! __is_valid_configuration
	then
		>&2 printf -- \
			'ERROR: %s configuration error\n' \
			"${0##*/}"
		exit 1
	fi

	if [[ ${verbose} == true ]]
	then
		if [[ -s ${pid_path} ]] \
			&& [[ -S ${stats_socket} ]] \
			&& ps axo command \
				| grep -qE "^${bin} "
		then
			printf -- \
				'INFO: %s reloading %s\n' \
				"${0##*/}" \
				"${bin##*/}"
		else
			printf -- \
				'INFO: %s starting %s\n' \
				"${0##*/}" \
				"${bin##*/}"
		fi
	fi

	__cleanup
	trap - \
		INT TERM EXIT

	eval "exec \
		${proxy} \
		${bin} \
		${options}"
}

main "${@}"
