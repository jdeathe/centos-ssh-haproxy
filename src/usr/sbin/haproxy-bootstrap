#!/usr/bin/env bash

set -e

function __cleanup ()
{
	local -r exit_code="${?}"

	__delete_lock

	if [[ ${exit_code} -eq 0 ]]
	then
		__create_state
	fi
}

function __create_lock ()
{
	if [[ -n ${LOCK_FILE} ]]
	then
		touch "${LOCK_FILE}"
	fi
}

function __create_state ()
{
	if [[ -n ${STATE_FILE} ]]
	then
		touch "${STATE_FILE}"
	fi
}

function __delete_lock ()
{
	if [[ -e ${LOCK_FILE} ]]
	then
		rm -f "${LOCK_FILE}"
	fi
}

function __get_timer_total ()
{
	local -r timer_end="$(
		date +%s.%N
	)"
	local -r timer_start="${1}"

	if [[ -z ${timer_start} ]] \
		|| [[ ${timer_start//.} -gt ${timer_end//.} ]]
	then
		>&2 printf -- \
			'ERROR: invalid timer start: %s\n' \
			"${timer_start}"
		printf -- \
			'0.000000'
	else
		awk \
			-v timer_end="${timer_end}" \
			-v timer_start="${timer_start}" \
			'BEGIN { print \
				timer_end - timer_start;
			}'
	fi
}

function __make_self_signed_san_certificate ()
{
	local -r certificate_path="/etc/pki/tls/certs/localhost.crt"
	local -r config_path="/etc/pki/tls/certs/localhost.cnf"
	local -r default_config_path="/etc/pki/tls/openssl.cnf"
	local -r hosts="${@}"

	local common_name
	local host
	local subject_alt_name

	# Use default host if none specified.
	if [[ ${#hosts[@]} -eq 0 ]]
	then
		hosts="localhost.localdomain"
	fi

	if [[ ${#hosts[@]} -gt 0 ]]
	then
		for host in ${hosts[@]}
		do
			if [[ -z ${subject_alt_name} ]]
			then
				# Common Name is required - use the first host.
				common_name="${host}"
			else
				# Additional hosts should be comma separated.
				subject_alt_name+=","
			fi

			# Build up the subjectAltName value.
			subject_alt_name+="DNS:${host}"
		done
	fi

	# Generate a custom openssl configuration - appending a san section.
	cat \
		"${default_config_path}" \
		- \
		<<-CONFIG > "${config_path}"

	[ san ]
	subjectAltName="${subject_alt_name:-root@localhost.localdomain}"
	CONFIG

	# Generate the certificate.
	openssl req \
		-x509 \
		-sha256 \
		-nodes \
		-newkey rsa:2048 \
		-days 365 \
		-reqexts san \
		-extensions san \
		-subj "/CN=${common_name}" \
		-config "${config_path}" \
		-keyout "${certificate_path}" \
		-out "${certificate_path}"
}

function __set_haproxy_certificate ()
{
	local -r certificate_path="/etc/pki/tls/certs/localhost.crt"
	local -r config_path="/etc/pki/tls/certs/localhost.cnf"
	local -r pattern_base64='^[A-Za-z0-9/+=]*$'
	local -r pattern_plain_text='-----BEGIN PRIVATE KEY-----'
	# local -r sni_certificate_directory_path="/etc/pki/tls/certs/sni"

	local file_path
	local host_names="${2:-localhost.localdomain}"
	local value="${1}"

	# Get value from file
	if [[ -n ${value} ]] \
		&& [[ -s ${value} ]]
	then
		file_path="${value}"
		value="$(
			cat "${value}"
		)"
	fi

	# Decode base64 encoded values
	if [[ -n ${value} ]] \
		&& [[ ! -s ${value} ]] \
		&& [[ ${value} =~ ${pattern_base64} ]]
	then
		value="$(
			base64 -d -i <<< "${value}"
		)"
		# Reset file path so unencoded value is written to container path
		if [[ -n ${file_path} ]] \
			&& [[ ${file_path} != ${certificate_path} ]]
		then
			file_path="${certificate_path}"
		fi
	fi

	if [[ -n ${value} ]] \
		&& [[ ! ${value} =~ ${pattern_plain_text} ]]
	then
		>&2 printf -- \
			'ERROR: Invalid HAPROXY_SSL_CERTIFICATE\n'
		exit 1
	elif [[ -n ${value} ]] \
		&& [[ -n ${file_path} ]] \
		&& [[ ${file_path} != ${certificate_path} ]]
	then
		# Create a sym-link if value is defined in a file
		ln -sf \
			"${file_path}" \
			"${certificate_path}"
	elif [[ -n ${value} ]]
	then
		printf \
			-- '%s' \
			"${value}" \
		> ${certificate_path}
	fi

	if [[ ! -s ${certificate_path} ]]
	then
		__make_self_signed_san_certificate \
			"${haproxy_host_names}" \
			&> /dev/null
	fi

	#TODO - Not sure why this is necessary
	# if [[ ! -s ${sni_certificate_directory_path}/localhost.crt ]]
	# then
	# 	cp -pf \
	# 		${certificate_path} \
	# 		${sni_certificate_directory_path}/
	# fi
}

function __set_haproxy_config ()
{
	local -r config_path="/etc/haproxy/haproxy.cfg"
	local -r pattern_base64='^[A-Za-z0-9/+=]*$'
	local -r pattern_plain_text='.* /var/lib/haproxy.*'

	local file_path
	local value="${1}"

	# Get value from file
	if [[ -n ${value} ]] \
		&& [[ -s ${value} ]]
	then
		file_path="${value}"
		value="$(
			cat "${value}"
		)"
	fi

	# Decode base64 encoded values
	if [[ -n ${value} ]] \
		&& [[ ! -s ${value} ]] \
		&& [[ ${value} =~ ${pattern_base64} ]]
	then
		value="$(
			base64 -d -i <<< "${value}"
		)"
		# Reset file path so unencoded value is written to container path
		if [[ -n ${file_path} ]] \
			&& [[ ${file_path} != ${config_path} ]]
		then
			file_path="${config_path}"
		fi
	fi

	if [[ -n ${value} ]] \
		&& [[ ! ${value} =~ ${pattern_plain_text} ]]
	then
		>&2 printf -- \
			'ERROR: Invalid HAPROXY_CONFIG\n'
		exit 1
	elif [[ -n ${value} ]] \
		&& [[ -n ${file_path} ]] \
		&& [[ ${file_path} != ${config_path} ]]
	then
		# Create a sym-link if value is defined in a file
		ln -sf \
			"${file_path}" \
			"${config_path}"
	elif [[ -n ${value} ]]
	then
		printf \
			-- '%s' \
			"${value}" \
		> "${config_path}"
	fi
}

function main ()
{
	LOCK_FILE="/var/lock/subsys/haproxy-bootstrap"
	STATE_FILE="/var/lib/misc/haproxy-bootstrap"

	local -r timer_start="$(
		date +%s.%N
	)"

	local haproxy_config="${HAPROXY_CONFIG:-"/etc/haproxy/haproxy.cfg"}"
	local haproxy_host_names="${HAPROXY_HOST_NAMES:-"localhost.localdomain"}"
	local haproxy_ssl_certificate="${HAPROXY_SSL_CERTIFICATE}"
	local verbose="false"

	# Parse options
	while [[ "${#}" -gt 0 ]]
	do
		case "${1}" in
			-v|--verbose)
				verbose="true"
				shift 1
				;;
		esac
	done

	if [[ -e ${STATE_FILE} ]]
	then
		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: %s finished - skipping.\n' \
				"${0##*/}"
		fi
		exit 0
	fi

	if [[ -e ${LOCK_FILE} ]]
	then
		>&2 printf -- \
			'ERROR: %s lock detected - aborting.\n' \
			"${0##*/}"
		exit 1
	fi

	trap "__cleanup" \
		INT TERM EXIT
	__create_lock

	__set_haproxy_certificate \
		"${haproxy_ssl_certificate}" \
		"${haproxy_host_names}"

	__set_haproxy_config \
		"${haproxy_config}"

	timer_total="$(
		__get_timer_total \
			"${timer_start}"
	)"

	if [[ ${verbose} == true ]]
	then
		cat <<-EOT

			================================================================================
			HAProxy Details
			--------------------------------------------------------------------------------
			host names : ${haproxy_host_names}
			
			$(haproxy -vv)
			--------------------------------------------------------------------------------
			${timer_total}

		EOT
	fi
}

main "${@}"
