#!/usr/bin/env bash

# Create lock file
touch /var/lock/subsys/haproxy-bootstrap

TIMER_START="$(
	date +%s.%N
)"

source /etc/haproxy-bootstrap.conf

function make_self_signed_san_certificate ()
{
	local CN
	local HOST
	local HOSTS="${@}"
	local SAN

	# Use default host if none specified.
	if [[ ${#HOSTS[@]} -eq 0 ]]; then
		HOSTS="localhost.localdomain"
	fi

	if [[ ${#HOSTS[@]} -gt 0 ]]; then
		for HOST in ${HOSTS[@]}; do
			if [[ -z ${SAN} ]]; then
				# Common Name is required - use the first host.
				CN="${HOST}"
			else
				# Additional hosts should be comma separated.
				SAN+=","
			fi

			# Build up the subjectAltName value.
			SAN+="DNS:${HOST}"
		done
	fi

	# Generate a custom openssl configuration - appending a san section.
	cat \
		/etc/pki/tls/openssl.cnf \
		- \
		<<-CONFIG > /etc/pki/tls/certs/localhost.cnf

	[ san ]
	subjectAltName="${SAN:-root@localhost.localdomain}"
	CONFIG

	# Generate the certificate.
	openssl req \
		-x509 \
		-sha256 \
		-nodes \
		-newkey rsa:2048 \
		-days 365 \
		-reqexts san \
		-extensions san \
		-subj "/CN=${CN}" \
		-config /etc/pki/tls/certs/localhost.cnf \
		-keyout /etc/pki/tls/certs/localhost.localdomain.crt \
		-out /etc/pki/tls/certs/localhost.localdomain.crt

}

function set_haproxy_config ()
{
	local -r pattern_base64='^[A-Za-z0-9/+=]*$'
	local -r pattern_plain_text='.* /var/lib/haproxy.*'

	local value="${1:-}"

	if [[ -n ${value} ]] \
		&& [[ ! -s ${value} ]]
	then
		# Decode base64 encoded values
		if [[ ${value} =~ ${pattern_base64} ]]; then
			value="$(
				base64 -d -i <<< "${value}"
			)"
		fi

		if [[ ! ${value} =~ ${pattern_plain_text} ]]; then
			printf -- \
				'ERROR: Invalid configuration file\n' \
				>&2
			sleep 0.1
			exit 1
		fi

		printf \
			-- '%s' \
			"${value}" \
		> /etc/haproxy/haproxy.cfg
	elif [[ -n ${value} ]] \
		&& [[ ${value} != /etc/haproxy/haproxy.cfg ]] \
		&& [[ ${value} != /etc/haproxy/haproxy-http.cfg ]] \
		&& [[ -s ${value} ]]
	then
		cat "${value}" \
		> /etc/haproxy/haproxy.cfg
	fi
}

# Generate a default self-signed SSL/TLS certificate if necessary.
if [[ ! -f /etc/pki/tls/certs/localhost.localdomain.crt ]]; then
	make_self_signed_san_certificate \
		"${HAPROXY_HOST_NAMES:-localhost.localdomain}" \
		&> /dev/null
	cp -pf \
		/etc/pki/tls/certs/localhost.localdomain.crt \
		/etc/pki/tls/certs/sni/
fi

set_haproxy_config \
	"${HAPROXY_CONFIG}"

TIMER_TOTAL="$(
	echo - | awk "\
	{ T1=\"${TIMER_START}\" } \
	{ T2=\"$(date +%s.%N)\" } \
	{ print T2 - T1; }"
)"

cat <<-EOT

	================================================================================
	HAProxy Details
	--------------------------------------------------------------------------------
	host names : ${HAPROXY_HOST_NAMES}
	
	$(haproxy -vv)
	--------------------------------------------------------------------------------
	${TIMER_TOTAL}

EOT

# Release lock file
rm -f /var/lock/subsys/haproxy-bootstrap

exit 0
