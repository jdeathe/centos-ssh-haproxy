# ------------------------------------------------------------------------------
# Naming convention:
#
#    centos-ssh-haproxy@.service = {service-unit-install-template-name}
#           |
#           +--------------------- {image-name}
#
#    haproxy@.service = {service-unit-template-name}
#       |
#       +-------------- {service-unit-name}
#
#    haproxy@1.service = {service-unit-instance-name}
#       |    |
#       |    +---------- {service-unit-instance}
#       +--------------- {service-unit-name}
#
#    haproxy.1 = {service-unit-long-name}
#       |    |
#       |    +-- {service-unit-instance}
#       +------- {service-unit-name}
#
# To install:
#     sudo cat {service-unit-install-template-name} \
#       > /etc/systemd/system/{service-unit-template-name}
#     sudo systemctl daemon-reload
#     sudo systemctl enable -f {service-unit-instance-name}
#
# Start using:
#     sudo systemctl [start|stop|restart|kill|status] \
#       {service-unit-instance-name}
#
# Debugging:
#     sudo systemctl status {service-unit-instance-name}
#     journalctl -fn 50 -u {service-unit-instance-name}
#
# To uninstall:
#     sudo systemctl disable -f {service-unit-instance-name}
#     sudo systemctl daemon-reload
#     sudo systemctl stop {service-unit-instance-name}
#     sudo rm /etc/systemd/system/{service-unit-template-name}
#     sudo docker rm -f {service-unit-long-name}
# ------------------------------------------------------------------------------

[Unit]
Description=centos-ssh-haproxy // %p@%i
Requires=docker.service
After=docker.service

[Service]
Restart=on-failure
RestartSec=30
TimeoutStartSec=1200
Environment="DOCKER_CONTAINER_OPTS="
Environment="DOCKER_IMAGE_PACKAGE_PATH=/var/opt/scmi/packages"
Environment="DOCKER_IMAGE_NAME=centos-ssh-haproxy"
Environment="DOCKER_IMAGE_TAG={{RELEASE_VERSION}}"
Environment="DOCKER_PORT_MAP_TCP_80=80"
Environment="DOCKER_PORT_MAP_TCP_443=443"
Environment="DOCKER_USER=jdeathe"
Environment="SYSCTL_NET_CORE_SOMAXCONN=32768"
Environment="SYSCTL_NET_IPV4_IP_LOCAL_PORT_RANGE=1024 65535"
Environment="SYSCTL_NET_IPV4_ROUTE_FLUSH=1"
Environment="ULIMIT_MEMLOCK=82000"
Environment="ULIMIT_NOFILE=131072"
Environment="ULIMIT_NPROC=9223372036854775807"
Environment="HAPROXY_SSL_CERTIFICATE="
Environment="HAPROXY_CONFIG=/etc/haproxy/haproxy.cfg"
Environment="HAPROXY_HOST_NAMES=localhost.localdomain"

# Initialisation: Load image from local storage if available, otherwise pull.
ExecStartPre=/bin/bash -c \
  "if [[ -z \"$(/usr/bin/docker images -q \
      ${DOCKER_USER}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
    )\" ]] \
    && [[ -z \"$(/usr/bin/docker images -q \
      docker.io/${DOCKER_USER}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
    )\" ]]; \
  then \
    if [[ -f ${DOCKER_IMAGE_PACKAGE_PATH}/${DOCKER_USER}/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz ]]; \
    then \
      printf -- '%%s/%%s/%%s.%%s.tar.xz\n' \
        \"${DOCKER_IMAGE_PACKAGE_PATH}\" \
        \"${DOCKER_USER}\" \
        \"${DOCKER_IMAGE_NAME}\" \
        \"${DOCKER_IMAGE_TAG}\" \
      | /usr/bin/xargs /usr/bin/xz -dc \
      | /usr/bin/docker load; \
    else \
      printf -- '%%s/%%s:%%s\n' \
        \"${DOCKER_USER}\" \
        \"${DOCKER_IMAGE_NAME}\" \
        \"${DOCKER_IMAGE_TAG}\" \
      | /usr/bin/xargs /usr/bin/docker pull; \
    fi; \
  fi"

# Terminate existing container to allow for redeployment
ExecStartPre=-/bin/bash -c \
  "if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p.%i\") ]]; \
  then \
    if [[ -n $(/usr/bin/docker ps -aq \
        --filter \"name=%p.%i\" \
        --filter \"status=paused\" \
      ) ]]; \
    then \
      /usr/bin/docker unpause %p.%i; \
    fi; \
    if [[ -n $(/usr/bin/docker ps -aq \
        --filter \"name=%p.%i\" \
        --filter \"status=running\" \
      ) ]]; \
    then \
      /usr/bin/docker stop %p.%i; \
    fi; \
    if [[ -n $(/usr/bin/docker ps -aq --filter \"name=%p.%i\") ]]; \
    then \
      /usr/bin/docker rm -f %p.%i; \
    fi; \
  fi"

# Startup
ExecStart=/bin/bash -c \
  "exec /usr/bin/docker run \
    -t \
    --name %p.%i \
    --sysctl \"net.core.somaxconn=${SYSCTL_NET_CORE_SOMAXCONN}\" \
    --sysctl \"net.ipv4.ip_local_port_range=${SYSCTL_NET_IPV4_IP_LOCAL_PORT_RANGE}\" \
    --sysctl \"net.ipv4.route.flush=${SYSCTL_NET_IPV4_ROUTE_FLUSH}\" \
    --ulimit \"memlock=${ULIMIT_MEMLOCK}\" \
    --ulimit \"nofile=${ULIMIT_NOFILE}\" \
    --ulimit \"nproc=${ULIMIT_NPROC}\" \
    --env \"HAPROXY_SSL_CERTIFICATE=${HAPROXY_SSL_CERTIFICATE}\" \
    --env \"HAPROXY_CONFIG=${HAPROXY_CONFIG}\" \
    --env \"HAPROXY_HOST_NAMES=${HAPROXY_HOST_NAMES}\" \
    $(if [[ ${DOCKER_PORT_MAP_TCP_80} != NULL ]]; \
    then \
      if /bin/grep -qE \
          '^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:)?[1-9][0-9]*$' \
          <<< \"${DOCKER_PORT_MAP_TCP_80}\"; \
        && /bin/grep -qE \
          '^.+\.[0-9]+(\.[0-9]+)?$' \
          <<< %p.%i; \
      then \
        printf -- '--publish %%s%%s:80' \
          $(\
            /bin/grep -o \
              '^[0-9\.]*:' \
              <<< \"${DOCKER_PORT_MAP_TCP_80}\" \
          ) \
          $(( \
            $(\
              /bin/grep -oE \
                '[0-9]+$' \
                <<< \"${DOCKER_PORT_MAP_TCP_80}\" \
            ) \
            + $(\
              /bin/grep -oE \
                '^[0-9]+' \
                <<< %i \
            ) \
            - 1 \
          )); \
      else \
        printf -- '--publish %%s:80' \
          \"${DOCKER_PORT_MAP_TCP_80}\"; \
      fi; \
    fi) \
    $(if [[ ${DOCKER_PORT_MAP_TCP_443} != NULL ]]; \
    then \
      if /bin/grep -qE \
          '^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:)?[1-9][0-9]*$' \
          <<< \"${DOCKER_PORT_MAP_TCP_443}\"; \
        && /bin/grep -qE \
          '^.+\.[0-9]+(\.[0-9]+)?$' \
          <<< %p.%i; \
      then \
        printf -- '--publish %%s%%s:443' \
          $(\
            /bin/grep -o \
              '^[0-9\.]*:' \
              <<< \"${DOCKER_PORT_MAP_TCP_443}\" \
          ) \
          $(( \
            $(\
              /bin/grep -oE \
                '[0-9]+$' \
                <<< \"${DOCKER_PORT_MAP_TCP_443}\" \
            ) \
            + $(\
              /bin/grep -oE \
                '^[0-9]+' \
                <<< %i \
            ) \
            - 1 \
          )); \
      else \
        printf -- '--publish %%s:443' \
          \"${DOCKER_PORT_MAP_TCP_443}\"; \
      fi; \
    fi) \
    ${DOCKER_CONTAINER_OPTS} \
    ${DOCKER_USER}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"

ExecStop=/usr/bin/docker stop --time 10 %p.%i

[Install]
DefaultInstance=1
WantedBy=multi-user.target
